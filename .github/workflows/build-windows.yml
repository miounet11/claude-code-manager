name: Build Windows Version

on:
  push:
    tags:
      - '*-windows*'
      - 'windows-v*'
      - 'v*'  # 支持通用版本标签
    branches:
      - feature/windows-support
    paths:
      - 'src-windows/**'
      - 'package-windows.json'
      - 'electron-builder-windows.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        include:
          - arch: x64
            name: 64-bit
          - arch: ia32
            name: 32-bit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install -g electron-builder
    
    - name: Prepare Windows build
      run: |
        # 备份并使用 Windows package.json
        Copy-Item package.json package.backup.json -Force
        Copy-Item package-windows.json package.json -Force
        
        # 更新版本号
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $package = Get-Content package.json | ConvertFrom-Json
          $package.version = "${{ github.event.inputs.version }}"
          $package | ConvertTo-Json -Depth 10 | Set-Content package.json
        }
      shell: powershell
    
    - name: Build Windows ${{ matrix.name }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: |
        $env:npm_config_arch="${{ matrix.arch }}"
        $env:npm_config_target_arch="${{ matrix.arch }}"
        
        # 构建 NSIS 和 ZIP
        npx electron-builder --config electron-builder-windows.json --${{ matrix.arch }} --win nsis,zip --publish=never
        
        # 64位额外构建 MSI
        if ("${{ matrix.arch }}" -eq "x64") {
          npx electron-builder --config electron-builder-windows.json --x64 --win msi --publish=never
        }
        
        # 显示构建结果
        Write-Output "`nBuild artifacts for ${{ matrix.name }}:"
        Get-ChildItem -Path "dist-windows" -Include "*.exe","*.msi","*.zip" | ForEach-Object {
          Write-Output "- $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
      shell: powershell
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: |
          dist-windows/*.exe
          dist-windows/*.msi
          dist-windows/*.zip
          dist-windows/*.blockmap
          dist-windows/latest*.yml
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: |
        if (Test-Path "package.backup.json") {
          Copy-Item package.backup.json package.json -Force
          Remove-Item package.backup.json -Force
        }
      shell: powershell
  
  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Miaoda ${{ github.ref_name }}
        body: |
          # 🪟 Miaoda Windows Version ${{ github.ref_name }}
          
          ## 📦 Downloads
          
          ### 64-bit Windows (Recommended)
          - **NSIS Installer**: `Miaoda-*-x64.exe`
          - **MSI Installer**: `Miaoda-*-x64.msi` (for enterprise deployment)
          - **Portable**: `Miaoda-*-x64.zip`
          
          ### 32-bit Windows
          - **NSIS Installer**: `Miaoda-*-ia32.exe`
          - **Portable**: `Miaoda-*-ia32.zip`
          
          ## ✨ Windows Features
          
          - 🖥️ Native Windows experience with Fluent Design
          - 💻 PowerShell and CMD support
          - 🚀 Windows Terminal integration
          - 🔧 Automatic environment detection
          
          ## 📋 System Requirements
          
          - Windows 10 version 1803 or later
          - Windows 11 (recommended)
          - 4GB RAM minimum, 8GB recommended
          
          ## 🚀 Installation
          
          1. Download the installer for your system
          2. Run the installer
          3. If you see a Windows Defender warning, click "More info" → "Run anyway"
          4. Follow the installation wizard
          
          ---
          
          **Note**: This is the Windows-specific version of Miaoda, optimized for Windows platform.
        files: |
          artifacts/**/*.exe
          artifacts/**/*.msi
          artifacts/**/*.zip
        draft: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  notify:
    needs: [build-windows, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🪟 Windows Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.ref_name || github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Windows 64-bit (x64)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows 32-bit (ia32)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 Release draft created: [View Release](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
        fi