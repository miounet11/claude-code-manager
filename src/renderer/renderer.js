'use strict';

let terminal = null;
let currentConfig = null;
let configs = [];

async function init() {
  console.log('ÂàùÂßãÂåñÊ∏≤ÊüìËøõÁ®ã...');
  
  // ÊµãËØï IPC ÈÄö‰ø°
  console.log('ÊµãËØï electronAPI:', window.electronAPI);
  
  try {
    // ÂÖàÊµãËØï IPC ÊòØÂê¶Ê≠£Â∏∏
    const testResult = await window.electronAPI.testIPC();
    console.log('IPC ÊµãËØïÁªìÊûú:', testResult);
  } catch (error) {
    console.error('IPC ÊµãËØïÂ§±Ë¥•:', error);
  }
  
  setupTerminal();
  setupEventListeners();
  await loadConfigs();
  
  // Âª∂ËøüÊâßË°åÁéØÂ¢ÉÊ£ÄÊü•ÔºåÁ°Æ‰øùÊâÄÊúâÂÜÖÂÆπÈÉΩÂ∑≤Âä†ËΩΩ
  setTimeout(async () => {
    console.log('Âª∂ËøüÊâßË°åÁéØÂ¢ÉÊ£ÄÊü•...');
    await checkEnvironment();
  }, 1000);
}

function setupTerminal() {
  // SimpleTerminal Â∑≤ÁªèÂú® simple-terminal.js ‰∏≠ÂÆö‰πâ‰∏∫ÂÖ®Â±ÄÂèòÈáè
  terminal = new window.SimpleTerminal(document.getElementById('terminal'));
  
  terminal.writeln('üî• Ê¨¢Ëøé‰ΩøÁî® Miaoda - ‰∏≠ÂõΩ‰πãÂÖâÔºÅ');
  terminal.writeln(`ÁâàÊú¨: ${window.electronAPI.versions.app || '2.0.0'}`);
  terminal.writeln('');
  terminal.writeln('üí• ÂÖ®ÁêÉÂîØ‰∏ÄÊîØÊåÅ 380+ AI Â§ßÊ®°ÂûãÁöÑÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºÅ');
  terminal.writeln('‚ö° ÊïàÁéáÊèêÂçá 100 ÂÄçÔºåÊàêÊú¨Èôç‰Ωé 90%ÔºÅ');
  terminal.writeln('üåü Áî®‰∫Ü Miaoda = Ëµ¢Âú® AI Êó∂‰ª£Ëµ∑Ë∑ëÁ∫øÔºÅ');
  terminal.writeln('');
  terminal.writeln('üíé ÁÇπÂáª"ÂÖ≥‰∫é"‰∫ÜËß£‰∏∫‰ªÄ‰πàÊàë‰ª¨ÊòØ‰∏≠ÂõΩ‰πãÂÖâ');
  terminal.writeln('üì¢ ÁÇπÂáª"ÂàÜ‰∫´"ËÆ©Êõ¥Â§ö‰∫∫ÂèóÁõäÔºÅ');
  terminal.writeln('');

  window.electronAPI.onTerminalData((data) => {
    terminal.write(data);
  });

  terminal.onData((data) => {
    window.electronAPI.sendTerminalInput(data);
  });
}

function setupEventListeners() {
  document.getElementById('check-env-btn').addEventListener('click', checkEnvironment);
  document.getElementById('new-config-btn').addEventListener('click', showNewConfigForm);
  document.getElementById('start-claude-btn').addEventListener('click', startClaudeCode);
  document.getElementById('export-config-btn').addEventListener('click', exportConfigs);
  document.getElementById('import-config-btn').addEventListener('click', importConfigs);
  document.getElementById('restore-default-btn').addEventListener('click', restoreDefaults);
  document.getElementById('config-edit-form').addEventListener('submit', saveConfig);
  document.getElementById('cancel-config-btn').addEventListener('click', hideConfigForm);
  document.getElementById('stop-claude-btn').addEventListener('click', stopClaudeCode);
  document.getElementById('clear-terminal-btn').addEventListener('click', clearTerminal);
  document.getElementById('copy-terminal-btn').addEventListener('click', copyTerminal);
  document.getElementById('about-btn').addEventListener('click', showAbout);
  document.getElementById('share-btn').addEventListener('click', showShare);
  
  // Ê∑ªÂä† Ctrl+C Âø´Êç∑ÈîÆÊù•ÂÅúÊ≠¢ Claude Code
  document.addEventListener('keydown', async (e) => {
    if (e.ctrlKey && e.key === 'c' && document.activeElement === terminal.input) {
      e.preventDefault();
      await stopClaudeCode();
    }
  });

  window.addEventListener('resize', () => {
    // ÁÆÄÂçïÁªàÁ´Ø‰ºöËá™Âä®ÈÄÇÂ∫î
  });

  window.electronAPI.onStatusUpdate((data) => {
    updateStatus(data.message);
  });
}

async function checkEnvironment() {
  const checkBtn = document.getElementById('check-env-btn');
  const originalText = checkBtn.textContent;
  
  // Á¶ÅÁî®ÊåâÈíÆÔºåÈò≤Ê≠¢ÈáçÂ§çÁÇπÂáª
  checkBtn.disabled = true;
  checkBtn.textContent = 'Ê£ÄÊü•‰∏≠...';
  
  // ÁªüËÆ°ÂäüËÉΩ‰ΩøÁî®
  window.electronAPI.trackFeatureUse('check_environment');
  
  updateStatus('Ê≠£Âú®Ê£ÄÊü•ÁéØÂ¢É...');
  terminal.writeln('\nÊ≠£Âú®Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É...\n');
  
  // Á´ãÂç≥ÊòæÁ§∫Ê£ÄÊü•Áä∂ÊÄÅÔºåÈÅøÂÖçÁïåÈù¢Êó†ÂìçÂ∫î
  const envItems = ['nodejs', 'git', 'uv', 'claude'];
  envItems.forEach(key => {
    const statusEl = document.querySelector(`[data-env="${key}"]`);
    if (statusEl) {
      statusEl.textContent = 'Ê£ÄÊü•‰∏≠...';
      statusEl.setAttribute('data-status', 'checking');
    }
  });

  try {
    console.log('ÂºÄÂßãË∞ÉÁî® checkEnvironment API...');
    const results = await window.electronAPI.checkEnvironment();
    console.log('Êî∂Âà∞ÁéØÂ¢ÉÊ£ÄÊü•ÁªìÊûú:', results);
    
    for (const [key, value] of Object.entries(results)) {
      const statusEl = document.querySelector(`[data-env="${key}"]`);
      const installBtn = document.querySelector(`[data-dep="${key}"]`);
      
      if (statusEl) {
        if (value.installed) {
          statusEl.textContent = value.version || 'Â∑≤ÂÆâË£Ö';
          statusEl.setAttribute('data-status', 'installed');
          terminal.writeln(`‚úì ${key}: ${value.version || 'Â∑≤ÂÆâË£Ö'}`);
          if (installBtn) installBtn.style.display = 'none';
        } else {
          const errorMsg = value.error || 'Êú™ÂÆâË£Ö';
          statusEl.textContent = errorMsg;
          statusEl.setAttribute('data-status', 'not-installed');
          terminal.writeln(`‚úó ${key}: ${errorMsg}`);
          if (installBtn) installBtn.style.display = 'inline-block';
        }
      }
    }
    
    terminal.writeln('\nÁéØÂ¢ÉÊ£ÄÊü•ÂÆåÊàê\n');
    updateStatus('ÁéØÂ¢ÉÊ£ÄÊü•ÂÆåÊàê');
    setupInstallButtons();
  } catch (error) {
    console.error('ÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•:', error);
    terminal.writeln(`\nÈîôËØØ: ${error.message}\n`);
    updateStatus('ÁéØÂ¢ÉÊ£ÄÊü•Â§±Ë¥•');
    
    // Â¶ÇÊûúÊ£ÄÊü•Â§±Ë¥•ÔºåÂ∞ÜÊâÄÊúâÁä∂ÊÄÅÈáçÁΩÆ‰∏∫ÈîôËØØÁä∂ÊÄÅ
    envItems.forEach(key => {
      const statusEl = document.querySelector(`[data-env="${key}"]`);
      if (statusEl) {
        statusEl.textContent = 'Ê£ÄÊü•Â§±Ë¥•';
        statusEl.setAttribute('data-status', 'error');
      }
    });
  } finally {
    // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
    checkBtn.disabled = false;
    checkBtn.textContent = originalText;
  }
}

function setupInstallButtons() {
  const installButtons = document.querySelectorAll('.install-btn');
  installButtons.forEach(btn => {
    btn.addEventListener('click', async (e) => {
      const dep = e.target.getAttribute('data-dep');
      await installDependency(dep);
    });
  });
}

async function installDependency(dep) {
  updateStatus(`Ê≠£Âú®ÂÆâË£Ö ${dep}...`);
  terminal.writeln(`\nÊ≠£Âú®ÂÆâË£Ö ${dep}...\n`);
  
  try {
    const result = await window.electronAPI.installDependency(dep);
    if (result.success) {
      terminal.writeln(`\n${result.message}\n`);
      updateStatus(result.message);
      await checkEnvironment();
    } else {
      terminal.writeln(`\nÂÆâË£ÖÂ§±Ë¥•: ${result.message}\n`);
      updateStatus(`ÂÆâË£Ö ${dep} Â§±Ë¥•`);
    }
  } catch (error) {
    terminal.writeln(`\nÂÆâË£ÖÂá∫Èîô: ${error.message}\n`);
    updateStatus(`ÂÆâË£Ö ${dep} Âá∫Èîô`);
  }
}

async function loadConfigs() {
  try {
    configs = await window.electronAPI.getConfigs();
    renderConfigList();
  } catch (error) {
    console.error('Âä†ËΩΩÈÖçÁΩÆÂ§±Ë¥•:', error);
  }
}

function renderConfigList() {
  const listEl = document.getElementById('config-list');
  listEl.innerHTML = '';

  configs.forEach(config => {
    const item = document.createElement('div');
    item.className = 'config-item';
    if (currentConfig && currentConfig.id === config.id) {
      item.classList.add('active');
    }
    
    item.innerHTML = `
      <div class="config-item-name">${config.name}</div>
      <div class="config-item-url">${config.apiUrl}</div>
    `;
    
    // ÂçïÂáªÈÄâÊã©ÈÖçÁΩÆ
    item.addEventListener('click', () => selectConfig(config));
    
    // ÂèåÂáªÁõ¥Êé•ÂêØÂä®
    item.addEventListener('dblclick', async () => {
      currentConfig = config;
      renderConfigList();
      updateStartButton();
      await startClaudeCode();
    });
    
    listEl.appendChild(item);
  });
}

function selectConfig(config) {
  currentConfig = config;
  renderConfigList();
  showConfigForm(config);
  updateStartButton();
}

function updateStartButton() {
  const startBtn = document.getElementById('start-claude-btn');
  if (currentConfig && currentConfig.apiUrl && currentConfig.apiKey) {
    startBtn.style.display = 'inline-block';
    startBtn.textContent = `ÂêØÂä® ${currentConfig.name || 'Claude Code'}`;
  } else {
    startBtn.style.display = 'none';
  }
}

function showNewConfigForm() {
  currentConfig = {
    id: Date.now().toString(),
    name: '',
    apiUrl: '',
    apiKey: '',
    model: 'claude-3-opus-20240229',
    proxyPort: 8082
  };
  showConfigForm(currentConfig);
}

function showConfigForm(config) {
  document.getElementById('config-id').value = config.id;
  document.getElementById('config-name').value = config.name;
  document.getElementById('api-url').value = config.apiUrl;
  document.getElementById('api-key').value = config.apiKey;
  document.getElementById('model').value = config.model;
  document.getElementById('proxy-port').value = config.proxyPort;
  
  document.getElementById('config-form').style.display = 'block';
  document.getElementById('terminal-container').style.display = 'none';
}

function hideConfigForm() {
  document.getElementById('config-form').style.display = 'none';
  document.getElementById('terminal-container').style.display = 'flex';
}

async function saveConfig(e) {
  e.preventDefault();
  
  const config = {
    id: document.getElementById('config-id').value,
    name: document.getElementById('config-name').value,
    apiUrl: document.getElementById('api-url').value,
    apiKey: document.getElementById('api-key').value,
    model: document.getElementById('model').value,
    proxyPort: parseInt(document.getElementById('proxy-port').value)
  };

  // È™åËØÅÈÖçÁΩÆ
  const validation = validateConfig(config);
  if (!validation.valid) {
    updateStatus(validation.message);
    terminal.writeln(`\nÈÖçÁΩÆÈîôËØØ: ${validation.message}\n`);
    return;
  }

  try {
    await window.electronAPI.saveConfig(config);
    await loadConfigs();
    hideConfigForm();
    updateStatus('ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò');
    terminal.writeln(`\nÈÖçÁΩÆ "${config.name}" Â∑≤‰øùÂ≠ò\n`);
    
    // ËÆæÁΩÆÂΩìÂâçÈÖçÁΩÆ
    currentConfig = config;
    updateStartButton();
    
    // Ëá™Âä®ÂêØÂä® Claude Code
    terminal.writeln('\nÊ≠£Âú®Ëá™Âä®ÂêØÂä® Claude Code...\n');
    await startClaudeCode();
  } catch (error) {
    updateStatus('‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•');
    terminal.writeln(`\n‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•: ${error.message}\n`);
  }
}

function validateConfig(config) {
  if (!config.name || config.name.trim() === '') {
    return { valid: false, message: 'ËØ∑ËæìÂÖ•ÈÖçÁΩÆÂêçÁß∞' };
  }
  
  if (!config.apiUrl || !isValidUrl(config.apiUrl)) {
    return { valid: false, message: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ API URL' };
  }
  
  if (!config.apiKey || config.apiKey.trim() === '') {
    return { valid: false, message: 'ËØ∑ËæìÂÖ• API Key' };
  }
  
  if (config.proxyPort < 1024 || config.proxyPort > 65535) {
    return { valid: false, message: '‰ª£ÁêÜÁ´ØÂè£ÂøÖÈ°ªÂú® 1024-65535 ‰πãÈó¥' };
  }
  
  return { valid: true };
}

function isValidUrl(string) {
  try {
    new URL(string);
    return true;
  } catch (_) {
    return false;
  }
}

async function startClaudeCode() {
  if (!currentConfig) {
    updateStatus('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ÈÖçÁΩÆ');
    return;
  }

  updateStatus('Ê≠£Âú®ÂêØÂä® Claude Code...');
  terminal.writeln('\nÊ≠£Âú®ÂêØÂä® Claude Code...\n');
  
  // ÁªüËÆ°ÂäüËÉΩ‰ΩøÁî®
  window.electronAPI.trackFeatureUse('start_claude');

  try {
    const result = await window.electronAPI.startClaudeCode(currentConfig);
    if (result.success) {
      updateStatus('Claude Code Â∑≤ÂêØÂä®');
      terminal.writeln('\nClaude Code Â∑≤ÂêØÂä®ÔºåÁé∞Âú®ÂèØ‰ª•ÂºÄÂßãÂØπËØù‰∫Ü\n');
    } else {
      updateStatus('ÂêØÂä®Â§±Ë¥•');
      terminal.writeln(`\nÂêØÂä®Â§±Ë¥•: ${result.message}\n`);
    }
  } catch (error) {
    updateStatus('ÂêØÂä®Âá∫Èîô');
    terminal.writeln(`\nÂêØÂä®Âá∫Èîô: ${error.message}\n`);
  }
}

async function restoreDefaults() {
  if (confirm('Á°ÆÂÆöË¶ÅÊÅ¢Â§çÂÆòÊñπÈªòËÆ§ËÆæÁΩÆÂêóÔºüËøôÂ∞ÜÂà†Èô§ÊâÄÊúâËá™ÂÆö‰πâÈÖçÁΩÆ„ÄÇ')) {
    try {
      configs = [];
      for (const config of await window.electronAPI.getConfigs()) {
        await window.electronAPI.deleteConfig(config.id);
      }
      renderConfigList();
      updateStatus('Â∑≤ÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆ');
      terminal.writeln('\nÂ∑≤ÊÅ¢Â§çÂÆòÊñπÈªòËÆ§ËÆæÁΩÆ\n');
    } catch (error) {
      updateStatus('ÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆÂ§±Ë¥•');
      terminal.writeln(`\nÊÅ¢Â§çÈªòËÆ§ËÆæÁΩÆÂ§±Ë¥•: ${error.message}\n`);
    }
  }
}

function clearTerminal() {
  terminal.clear();
}

function copyTerminal() {
  const selection = terminal.getSelection();
  if (selection) {
    navigator.clipboard.writeText(selection);
    updateStatus('Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
  }
}

function updateStatus(message) {
  const statusEl = document.getElementById('status-message');
  statusEl.textContent = message;
  
  // Ê∑ªÂä†Êó∂Èó¥Êà≥
  const now = new Date();
  const timeStr = now.toLocaleTimeString('zh-CN', { 
    hour: '2-digit', 
    minute: '2-digit', 
    second: '2-digit' 
  });
  
  // Áä∂ÊÄÅÊ†èÂä®ÁîªÊïàÊûú
  statusEl.style.opacity = '0';
  setTimeout(() => {
    statusEl.textContent = `[${timeStr}] ${message}`;
    statusEl.style.opacity = '1';
  }, 100);
  
  // Ëá™Âä®Ê∏ÖÈô§Áä∂ÊÄÅÊ∂àÊÅØ
  clearTimeout(window.statusTimeout);
  window.statusTimeout = setTimeout(() => {
    if (statusEl.textContent.includes(message)) {
      statusEl.textContent = 'Â∞±Áª™';
    }
  }, 5000);
}

async function exportConfigs() {
  if (configs.length === 0) {
    updateStatus('Ê≤°ÊúâÈÖçÁΩÆÂèØÂØºÂá∫');
    return;
  }
  
  const data = JSON.stringify(configs, null, 2);
  const blob = new Blob([data], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const a = document.createElement('a');
  a.href = url;
  a.download = `miaoda-configs-${Date.now()}.json`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  updateStatus(`Â∑≤ÂØºÂá∫ ${configs.length} ‰∏™ÈÖçÁΩÆ`);
  terminal.writeln(`\nÂ∑≤ÂØºÂá∫ ${configs.length} ‰∏™ÈÖçÁΩÆÂà∞Êñá‰ª∂\n`);
}

async function importConfigs() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  
  input.onchange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    try {
      const text = await file.text();
      const importedConfigs = JSON.parse(text);
      
      if (!Array.isArray(importedConfigs)) {
        throw new Error('Êó†ÊïàÁöÑÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºè');
      }
      
      for (const config of importedConfigs) {
        // È™åËØÅÂØºÂÖ•ÁöÑÈÖçÁΩÆ
        const validation = validateConfig(config);
        if (validation.valid) {
          // ÁîüÊàêÊñ∞IDÈÅøÂÖçÂÜ≤Á™Å
          config.id = Date.now().toString() + Math.random().toString(36).substr(2, 9);
          await window.electronAPI.saveConfig(config);
        }
      }
      
      await loadConfigs();
      updateStatus(`Â∑≤ÂØºÂÖ• ${importedConfigs.length} ‰∏™ÈÖçÁΩÆ`);
      terminal.writeln(`\nÂ∑≤‰ªéÊñá‰ª∂ÂØºÂÖ• ${importedConfigs.length} ‰∏™ÈÖçÁΩÆ\n`);
    } catch (error) {
      updateStatus('ÂØºÂÖ•ÈÖçÁΩÆÂ§±Ë¥•');
      terminal.writeln(`\nÂØºÂÖ•Â§±Ë¥•: ${error.message}\n`);
    }
  };
  
  input.click();
}

async function stopClaudeCode() {
  try {
    await window.electronAPI.stopClaudeCode();
    terminal.writeln('\n\nÂ∑≤ÂÅúÊ≠¢ Claude Code ËøõÁ®ã\n');
    updateStatus('Claude Code Â∑≤ÂÅúÊ≠¢');
  } catch (error) {
    terminal.writeln(`\nÂÅúÊ≠¢Â§±Ë¥•: ${error.message}\n`);
  }
}

function showAbout() {
  terminal.writeln('\n========== üî• Miaoda - ‰∏≠ÂõΩ‰πãÂÖâÔºÅ==========');
  terminal.writeln('');
  terminal.writeln('üöÄ **ÂÖ®ÁêÉÂîØ‰∏ÄÊîØÊåÅ 380+ Áßç AI Â§ßÊ®°ÂûãÁöÑÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºÅ**');
  terminal.writeln('');
  terminal.writeln('üí• ‰∏∫‰ªÄ‰πàÊàë‰ª¨Êï¢ËØ¥ÊòØ‰∏≠ÂõΩ‰πãÂÖâÔºü');
  terminal.writeln('  ‚Ä¢ üåè **380+ Ê®°Âûã** - ‰∏Ä‰∏™Â∑•ÂÖ∑ÊêûÂÆöÂÖ®ÁêÉÊâÄÊúâ AIÔºÅ');
  terminal.writeln('  ‚Ä¢ üí∞ **Ê∞∏‰πÖÂÖçË¥π** - ‰∏∫‰Ω†ÁúÅ‰∏ãÊØèÂπ¥ Ôø•2400+ÔºÅ');
  terminal.writeln('  ‚Ä¢ ‚ö° **ÊïàÁéá 100 ÂÄç** - 3 ÁßíÂêØÂä®ÔºåÁû¨Èó¥ËøûÊé•ÔºÅ');
  terminal.writeln('  ‚Ä¢ üèÜ **Áî®Êà∑ 10000+** - ÈÅçÂ∏ÉÂÖ®ÁêÉ 50+ ÂõΩÂÆ∂ÔºÅ');
  terminal.writeln('');
  terminal.writeln('üéØ ÊîØÊåÅÊâÄÊúâÈ°∂Á∫ßÂ§ßÂéÇÔºö');
  terminal.writeln('  OpenAI„ÄÅAnthropic„ÄÅGoogle„ÄÅÂæÆËΩØ„ÄÅÁôæÂ∫¶„ÄÅÈòøÈáå„ÄÅ');
  terminal.writeln('  ËÖæËÆØ„ÄÅÂçé‰∏∫„ÄÅÂ≠óËäÇ„ÄÅÂïÜÊ±§„ÄÅËÆØÈ£û„ÄÅÊô∫Ë∞±...');
  terminal.writeln('');
  terminal.writeln('üíé Áî®‰∫Ü Miaoda = Ëµ¢Âú® AI Êó∂‰ª£Ëµ∑Ë∑ëÁ∫øÔºÅ');
  terminal.writeln('');
  terminal.writeln('GitHubÔºöhttps://github.com/miounet11/claude-code-manager');
  terminal.writeln('');
  terminal.writeln('üåü **ÊîπÂèò‰∏ñÁïåÔºå‰ªéËøôÈáåÂºÄÂßãÔºÅ**');
  terminal.writeln('====================================\n');
  
  // ÁªüËÆ°ÂäüËÉΩ‰ΩøÁî®
  window.electronAPI.trackFeatureUse('view_about');
}

function showShare() {
  terminal.writeln('\n========== üî• ÂøÖÈ°ªÂàÜ‰∫´ÔºÅËøôÊòØ‰∏≠ÂõΩ‰πãÂÖâÔºÅ==========');
  terminal.writeln('');
  terminal.writeln('üí• **ÈúáÊíºÔºÅÂÖ®ÁêÉÂîØ‰∏ÄÊîØÊåÅ 380+ AI Ê®°ÂûãÁöÑÁ•ûÂô®ÔºÅ**');
  terminal.writeln('');
  terminal.writeln('üìã ‰∏ÄÈîÆÂ§çÂà∂ÔºåÂàÜ‰∫´ÁªôÊâÄÊúâ‰∫∫Ôºö');
  terminal.writeln('');
  terminal.writeln('„Äêüî•‰∏≠ÂõΩ‰πãÂÖâ„ÄëMiaoda - ËÆ©‰Ω†Ëµ¢Âú® AI Êó∂‰ª£Ëµ∑Ë∑ëÁ∫øÔºÅ');
  terminal.writeln('');
  terminal.writeln('üí• ‰∏∫‰ªÄ‰πàËØ¥Áî®‰∫ÜÂ∞±Âõû‰∏çÂéª‰∫ÜÔºü');
  terminal.writeln('‚úÖ ÊîØÊåÅ 380+ Áßç AI Â§ßÊ®°ÂûãÔºàÂÖ®ÁêÉÂîØ‰∏ÄÔºÅÔºâ');
  terminal.writeln('‚úÖ ÊïàÁéáÊèêÂçá 100 ÂÄçÔºà3ÁßíÂêØÂä®ÔºÅÔºâ');
  terminal.writeln('‚úÖ Ê∞∏‰πÖÂÖçË¥πÔºàÁúÅ‰∏ãÂá†ÂçÉÂùóÔºÅÔºâ');
  terminal.writeln('‚úÖ ‰∏≠ÊñáÂéüÁîüÊîØÊåÅÔºàÂõΩ‰∫ßÈ™ÑÂÇ≤ÔºÅÔºâ');
  terminal.writeln('');
  terminal.writeln('üéØ ÊîØÊåÅÊâÄÊúâÂ§ßÂéÇÔºöOpenAI/Claude/Google/ÁôæÂ∫¶/ÈòøÈáå/ËÖæËÆØ...');
  terminal.writeln('');
  terminal.writeln('‚ö° Á´ãÂç≥‰∏ãËΩΩÔºöhttps://github.com/miounet11/claude-code-manager');
  terminal.writeln('');
  terminal.writeln('#Miaoda #‰∏≠ÂõΩ‰πãÂÖâ #AIÁºñÁ®ãÁ•ûÂô® #ÊïàÁéá100ÂÄç');
  terminal.writeln('');
  terminal.writeln('üì¢ ÂàÜ‰∫´Ê∏†ÈÅìÔºö');
  terminal.writeln('  ‚Ä¢ üí¨ ÂæÆ‰ø°Áæ§ - ËÆ©ÊúãÂèã‰ª¨ÈÉΩÁî®‰∏äÔºÅ');
  terminal.writeln('  ‚Ä¢ üåü ÊúãÂèãÂúà - Â±ïÁ§∫‰Ω†ÁöÑÂâçÁûªÁúºÂÖâÔºÅ');
  terminal.writeln('  ‚Ä¢ üì± ÊäñÈü≥/Â∞èÁ∫¢‰π¶ - Êàê‰∏∫ AI È¢ÜÂüü KOLÔºÅ');
  terminal.writeln('  ‚Ä¢ ‚≠ê GitHub Star - ÊîØÊåÅÂõΩ‰∫ßÂºÄÊ∫êÔºÅ');
  terminal.writeln('');
  terminal.writeln('üéÅ **ÂàÜ‰∫´Â∞±ÊòØÊúÄÂ§ßÁöÑÊîØÊåÅÔºÅËÆ©Êõ¥Â§ö‰∫∫ÂèóÁõäÔºÅ**');
  terminal.writeln('=========================================\n');
  
  // Â§çÂà∂ÂàÜ‰∫´ÊñáÊú¨Âà∞Ââ™Ë¥¥Êùø
  const shareText = `„Äêüî•‰∏≠ÂõΩ‰πãÂÖâ„ÄëMiaoda - ËÆ©‰Ω†Ëµ¢Âú® AI Êó∂‰ª£Ëµ∑Ë∑ëÁ∫øÔºÅ

üí• ‰∏∫‰ªÄ‰πàËØ¥Áî®‰∫ÜÂ∞±Âõû‰∏çÂéª‰∫ÜÔºü
‚úÖ ÊîØÊåÅ 380+ Áßç AI Â§ßÊ®°ÂûãÔºàÂÖ®ÁêÉÂîØ‰∏ÄÔºÅÔºâ
‚úÖ ÊïàÁéáÊèêÂçá 100 ÂÄçÔºà3ÁßíÂêØÂä®ÔºÅÔºâ
‚úÖ Ê∞∏‰πÖÂÖçË¥πÔºàÁúÅ‰∏ãÂá†ÂçÉÂùóÔºÅÔºâ
‚úÖ ‰∏≠ÊñáÂéüÁîüÊîØÊåÅÔºàÂõΩ‰∫ßÈ™ÑÂÇ≤ÔºÅÔºâ

üéØ ÊîØÊåÅÊâÄÊúâÂ§ßÂéÇÔºöOpenAI/Claude/Google/ÁôæÂ∫¶/ÈòøÈáå/ËÖæËÆØ...

‚ö° Á´ãÂç≥‰∏ãËΩΩÔºöhttps://github.com/miounet11/claude-code-manager

#Miaoda #‰∏≠ÂõΩ‰πãÂÖâ #AIÁºñÁ®ãÁ•ûÂô® #ÊïàÁéá100ÂÄç`;
  
  navigator.clipboard.writeText(shareText).then(() => {
    updateStatus('ÈúáÊíºÊñáÊ°àÂ∑≤Â§çÂà∂ÔºÅÂø´ÂéªÂàÜ‰∫´ÂêßÔºÅ');
  });
  
  // ÁªüËÆ°ÂäüËÉΩ‰ΩøÁî®
  window.electronAPI.trackFeatureUse('share');
}

document.addEventListener('DOMContentLoaded', init);